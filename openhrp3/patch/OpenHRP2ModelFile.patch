Index: server/ModelLoader/BodyInfo_impl.cpp
===================================================================
--- server/ModelLoader/BodyInfo_impl.cpp	(リビジョン 2591)
+++ server/ModelLoader/BodyInfo_impl.cpp	(作業コピー)
@@ -326,9 +326,22 @@
     TProtoFieldMap& fmap = jointNode->fields;
 
     CORBA::Long jointId;
-    copyVrmlField( fmap, "jointId", jointId );
-    linkInfo.jointId = (CORBA::Short)jointId; 
+    VrmlVariantField& fJointId = fmap["jointId"];
+    switch( fJointId.typeId() ) {
 
+    case SFFLOAT:
+      jointId = (CORBA::Long)fJointId.sfFloat();
+      break;
+		
+    case SFINT32:
+      copyVrmlField( fmap, "jointId", jointId);
+      break;
+
+    default:
+        break;
+    }
+    linkInfo.jointId = (CORBA::Short)jointId;
+
     linkInfo.jointAxis[0] = 0.0;
     linkInfo.jointAxis[1] = 0.0;
     linkInfo.jointAxis[2] = 0.0;
@@ -571,7 +584,12 @@
             sensorInfo.specValues[2] = maxAcceleration[2];
             
         } else if( sensorType == "Vision" ){
-            sensorInfo.specValues.length( CORBA::ULong(7) );
+            // Compatibility for no "frameRate" version such as OpenHRP2 VRML format
+            if ( fmap.find("frameRate") != fmap.end() ) { // latest VRML format
+              sensorInfo.specValues.length( CORBA::ULong(7) );
+            } else { // old VRML format
+              sensorInfo.specValues.length( CORBA::ULong(6) );
+            }
 
             CORBA::Double specValues[3];
             copyVrmlField(fmap, "frontClipDistance", specValues[0] );
@@ -607,9 +625,11 @@
             sensorInfo.specValues[4] = static_cast<CORBA::Double>(width);
             sensorInfo.specValues[5] = static_cast<CORBA::Double>(height);
 	    
-	    double frameRate;
-            copyVrmlField(fmap, "frameRate", frameRate);
-            sensorInfo.specValues[6] = frameRate;
+            if ( fmap.find("frameRate") != fmap.end() ) {
+              double frameRate;
+              copyVrmlField(fmap, "frameRate", frameRate);
+              sensorInfo.specValues[6] = frameRate;
+            }
         } else if( sensorType == "Range" ){
             sensorInfo.specValues.length( CORBA::ULong(4) );
             CORBA::Double v;
Index: server/ModelLoader/ColladaWriter.h
===================================================================
--- server/ModelLoader/ColladaWriter.h	(リビジョン 2591)
+++ server/ModelLoader/ColladaWriter.h	(作業コピー)
@@ -1084,8 +1084,8 @@
         else if( vrmltype == "vision" ) {
             domsensor->setAttribute("type","base_pinhole_camera");
             // frontClipDistance, backClipDistance, fieldOfView, type, width, height, frameRate
-            if( sensor.specValues.length() != 7 ) {
-                COLLADALOG_WARN(str(boost::format("vision sensor has wrong number of values! %d!=7")%sensor.specValues.length()));
+            if( sensor.specValues.length() != 7 && sensor.specValues.length() != 6 ) {
+                COLLADALOG_WARN(str(boost::format("vision sensor has wrong number of values! %d!=7 or 6")%sensor.specValues.length()));
             }
             domsensor->add("focal_length")->setCharData(str(boost::format("%f")%sensor.specValues[0]));
             double fieldOfView = sensor.specValues[2], width = sensor.specValues[4], height = sensor.specValues[5];
@@ -1121,7 +1121,10 @@
             }
             domsensor->add("format")->setCharData(format);
             domsensor->add("image_dimensions")->setCharData(simage_dimensions.str());
-            domsensor->add("measurement_time")->setCharData(str(boost::format("%f")%(1.0/sensor.specValues[6])));
+            // Compatibility for no "frameRate" version such as OpenHRP2 VRML format
+            if ( sensor.specValues.length() == 7) { // latest VRML format
+              domsensor->add("measurement_time")->setCharData(str(boost::format("%f")%(1.0/sensor.specValues[6])));
+            }
         }
         else if( vrmltype == "range" ) {
             domsensor->setAttribute("type","base_laser1d");
Index: hrplib/hrpModel/ModelNodeSet.cpp
===================================================================
--- hrplib/hrpModel/ModelNodeSet.cpp	(リビジョン 2591)
+++ hrplib/hrpModel/ModelNodeSet.cpp	(作業コピー)
@@ -321,10 +321,19 @@
     requireField("rotation", SFROTATION);
     requireField("translation", SFVEC3F);
     requireField("jointType", SFSTRING);
-    requireField("jointId", SFINT32);
 
     VrmlVariantField* field;
 
+    field = protoToCheck->getField("jointId");
+    if(!field){
+        throw ModelNodeSet::Exception
+            ("Prototype of Humanoid must have the \"jointId\" field");
+    }
+    if(field->typeId() != SFFLOAT && field->typeId() != SFINT32){
+        throw ModelNodeSet::Exception
+            ("The type of \"jointId\" field in \"Humanoid\" prototype must be SFFloat or SFInt32");
+    }
+
     field = protoToCheck->getField("jointAxis");
     if(!field){
         throw ModelNodeSet::Exception
Index: hrplib/hrpModel/ModelLoaderUtil.cpp
===================================================================
--- hrplib/hrpModel/ModelLoaderUtil.cpp	(リビジョン 2591)
+++ hrplib/hrpModel/ModelLoaderUtil.cpp	(作業コピー)
@@ -441,7 +441,10 @@
                     vision->image.resize(npixel);
                     break;
                 }
-                vision->frameRate = sensorInfo.specValues[6];
+                // Compatibility for no "frameRate" version such as OpenHRP2 VRML format
+                if (sensorInfo.specValues.length() == 7) { // latest VRML format
+                  vision->frameRate = sensorInfo.specValues[6];
+                }
             }
         }
     }
